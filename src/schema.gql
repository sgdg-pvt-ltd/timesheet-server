# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Projects {
  masterProjectId: ID!
  role: String!
  masterProjectName: String!
  projectDescription: String!
  clientContact: String!
  masterProjectBudget: Float!
}

type ProjectOutput {
  masterProjectId: ID!
  role: UserRole!
  masterProjectName: String!
  projectDescription: String
  clientContact: String
  masterProjectBudget: Float
}

enum UserRole {
  superAdmin
  masterAdmin
  unitAdmin
  normalAdmin
}

type Organization {
  id: ID!
  name: String!
  users: [User]
  deletedAt: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  id: String!
  username: String!
  email: String!
  password: String!
  resetToken: String!
  organization: Organization!
}

type Client {
  clientId: ID!
  clientName: String!
  clientContact: String!
  projectList: [Projects!]
}

type Invitation {
  id: String!
  email: String!
  organizationId: String!
  role: UserRole!
}

type InvitationResponse {
  invitation: Invitation!
  token: String!
}

type Admin {
  id: String!
  username: String!
  password: String!
  role: UserRole!
}

type Query {
  projects: [ProjectOutput!]!
  project(id: String!): ProjectOutput!
  users(limit: Int!, offset: Int!): [User!]!
  clients: [Client!]!
  client(clientId: String!): Client!
  organizations: [Organization!]!
  organization(id: String!): Organization!
  findAllAdmins: [Admin!]!
  findOneAdmin(id: String!): Admin!
}

type Mutation {
  createProject(data: ProjectInput!): ProjectOutput!
  updateProject(data: ProjectInput!, id: String!): ProjectOutput!
  createClient(clientInput: ClientInput!): Client!
  updateClient(clientId: String!, clientInput: ClientInput!): Client!
  removeClient(clientId: String!): Boolean!
  signIn(signInInput: SigninInput!): String!
  signUp(signUpInput: SignupInput!): User!
  inviteUser(createInvitationInput: CreateInvitationDto!): InvitationResponse!
  createOrganization(createOrganizationDto: CreateOrganizationDto!, adminId: String!): Organization!
  updateOrganization(updateOrganizationDto: UpdateOrganizationDto!): Organization!
  softDeleteOrganization(id: String!, adminId: String!): Boolean!
  createAdmin(createAdmin: CreateAdminDto!): Admin!
  updateAdmin(id: String!, updateAdmin: UpdateAdminDto!): Admin!
  removeAdmin(id: Int!): Boolean!
}

input ProjectInput {
  masterProjectName: String!
  role: UserRole!
  projectDescription: String
  clientContact: String
  masterProjectBudget: Float
}

input ClientInput {
  clientName: String
  clientContact: String
  projectList: [ProjectInput!]
}

input SigninInput {
  email: String!
  password: String!
}

input SignupInput {
  username: String
  email: String!
  password: String!
  confirmPassword: String!
}

input CreateInvitationDto {
  email: String!
  organizationId: String!
  role: UserRole!
}

input CreateOrganizationDto {
  name: String!
}

input UpdateOrganizationDto {
  name: String
  id: String!
}

input CreateAdminDto {
  username: String!
  password: String!
}

input UpdateAdminDto {
  username: String
  password: String
}