# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Projects {
  masterProjectId: ID!
  role: String!
  masterProjectName: String!
  projectDescription: String!
  clientContact: String!
  masterProjectBudget: Float!
}

type ProjectOutput {
  masterProjectId: ID!
  role: UserRole!
  masterProjectName: String!
  projectDescription: String
  clientContact: String
  masterProjectBudget: Float
}

enum UserRole {
  superAdmin
  masterAdmin
  unitAdmin
  normalAdmin
}

type Organization {
  id: ID!
  name: String!
  adminId: String!
  deletedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  id: String!
  username: String!
  email: String!
  password: String!
  resetToken: String!
  organizationId: String!
  role: UserRole!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Client {
  id: ID!
  projectList: [Projects!]
  organizationId: String
  title: String
  firstName: String
  lastName: String
  customerDisplayName: String
  companyName: String
  emailAddress: String
  phoneNumber: String
  mobileNumber: String
  other: String
  fax: String
  website: String
  createdBy: String
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type SignupResponse {
  id: String!
  email: String!
  role: UserRole!
}

type SignInResponseDto {
  email: String!
  id: String!
  organizationIds: [String!]!
  token: String!
}

type Invitation {
  id: String!
  email: String!
  organizationId: String!
  role: UserRole!
}

type InvitationResponse {
  invitation: Invitation!
  token: String!
}

type UserDetailsDto {
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OrganizationUsersDto {
  organizationId: String!
  organizationName: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  userDetails: [UserDetailsDto!]!
}

type Query {
  projects: [ProjectOutput!]!
  project(id: String!): ProjectOutput!
  users(limit: Int!, offset: Int!): [User!]!
  clients: [Client!]!
  client(clientId: String!): Client!
  organizations: [Organization!]!
  organization(id: String!): Organization!
  getSingleOrganizationWithUser(organizationId: String!): OrganizationUsersDto!
  getOrganizationsWithUsers: [OrganizationUsersDto!]!
}

type Mutation {
  createProject(data: ProjectInput!): ProjectOutput!
  updateProject(data: ProjectInput!, id: String!): ProjectOutput!
  createClient(adminId: String!, clientInput: ClientInput!): Client!
  updateClient(adminId: String!, clientId: String!, clientInput: ClientInput!): Client!
  removeClient(adminId: String!, clientId: String!): Boolean!
  signIn(signInInput: SigninInput!): SignInResponseDto!
  signUp(signUpInput: SignupInput!): SignupResponse!
  inviteUser(createInvitationInput: CreateInvitationDto!): InvitationResponse!
  acceptInvitation(acceptInvitationInput: AcceptInvitationDto!): User!
  createOrganization(createOrganizationDto: CreateOrganizationDto!, adminId: String!): Organization!
  updateOrganization(updateOrganizationDto: UpdateOrganizationDto!): Organization!
  softDeleteOrganization(id: String!, adminId: String!): Boolean!
  switchUserOrganization(switchUserOrganizationDto: SwitchUserOrganizationDto!): String!
}

input ProjectInput {
  masterProjectName: String!
  role: UserRole!
  projectDescription: String
  clientContact: String
  masterProjectBudget: Float
}

input ClientInput {
  title: String
  firstName: String
  lastName: String
  customerDisplayName: String
  companyName: String
  emailAddress: String
  phoneNumber: String
  mobileNumber: String
  other: String
  fax: String
  website: String
}

input SigninInput {
  email: String!
  password: String!
}

input SignupInput {
  email: String!
  password: String!
  confirmPassword: String!
}

input CreateInvitationDto {
  email: String!
  organizationId: String!
  role: UserRole!
}

input AcceptInvitationDto {
  password: String!
  confirmPassword: String!
}

input CreateOrganizationDto {
  name: String!
}

input UpdateOrganizationDto {
  name: String
  id: String!
}

input SwitchUserOrganizationDto {
  userId: String!
  organizationId: String!
}